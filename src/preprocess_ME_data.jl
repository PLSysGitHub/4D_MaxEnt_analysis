"""
Loading configurations generated by MaxEnt code
"""

using DelimitedFiles, HDF5, LinearAlgebra, ProgressMeter
include("helpers.jl")

"""
    reorient!(ring, linear, ori, l)

Reorients the ring polymer configurations such that the first chromosome has an ori further from the ter.

# Arguments
- `ring`: ring polymer configuration
- `linear`: linear polymer configuration
- `ori`: index of the ori
- `l`: half of replicated length

# Returns
- `ring`: reoriented ring polymer configuration
- `linear`: reoriented linear polymer configuration
"""
function reorient!(ring, linear, ori, l)
    N=length(ring[1,:])
    ter=periodic_ind(floor(Int,ori+N/2),N)
    if abs(ring[3,ori]-ring[3,ter])<abs(linear[3,ori]-ring[3,ter])
        #swap
        on_ring=periodic_ind.(ori-l:ori+l, N)
        buffer=ring[:,on_ring]
        ring[:,on_ring].=linear[:,on_ring]
        linear[:,on_ring].=buffer

        if ring[3,ori]>ring[3,ter]
            ring[3,:].*=-1
            linear[3,:].*=-1
        end
    elseif ring[3,ori]>ring[3,ter]
        ring[3,:].*=-1
        linear[3,:].*=-1
    end
end

"""
    load_configs(sim_dir, save_dir, t; mon_sep=4, skip_done=true)

Loads configurations from MaxEnt txt files and saves them in a .h5 format that is easier to work with.

# Arguments
- `sim_dir`: directory containing the MaxEnt simulation output
- `save_dir`: directory to save the configurations in
- `t`: time point to load
- `mon_sep`: number of monomers between sampled beads
- `skip_done`: if true, skips loading if the file already exists
"""
function compress_configs(sim_dir, save_dir, t; mon_sep=4, skip_done=true)
    if sim_dir[end]!='/'
        sim_dir=sim_dir*"/"
    end
    if save_dir[end]!='/'
        save_dir=save_dir*"/"
    end
    if !isdir(save_dir)
        mkpath(save_dir)
    end

    if !isfile(save_dir*"ring_t$t.h5") || !skip_done
        config_dir=sim_dir*"Configurations/"
        info=readdlm(sim_dir*"sim_params.txt")
        thread_n=info[1,3]
        ori=info[13,2]
        N=info[2,3]
        n=info[14,2]
    
        ori=Int(ori/mon_sep)+1
        n=Int(n/mon_sep)
        fork=[n+1, N-n]
    
        lin_file=h5open(save_dir*"lin_t$t.h5", "w")
        ring_file=h5open(save_dir*"ring_t$t.h5", "w")
        counter=0
        if isfile(sim_dir*"Energies/energies_0.txt")
            energies=readdlm(sim_dir*"Energies/energies_0.txt")
            energies=shifted_map(energies, ori)
            write(ring_file, "energies", energies)
        end
        write(ring_file,"fork",fork)
    
        @showprogress 1 for i in 0:thread_n-1
            try
                n_samples=Int(length(readdir(config_dir*"thread_$i/"))/2) #[contains.("config",readdir(config_dir*"thread_$i/"))]
            catch
                close(lin_file)
                close(ring_file)
                error("directory "*config_dir*"thread_$i/ with $(length(readdir(config_dir*"thread_$i/"))/2) files...")
                return
            end
            n_samples=Int(length(readdir(config_dir*"thread_$i/"))/2) #[contains.("config",readdir(config_dir*"thread_$i/"))]
    
            for j in 1:n_samples
                counter+=1
                if t!=0
                    ring=permutedims(readdlm(config_dir*"thread_$i/config_$j.txt", Int)[1:mon_sep:end,:])
                    lin=permutedims(readdlm(config_dir*"thread_$i/lin_config_$j.txt", Int)[1:mon_sep:end,:])
                    reorient!(ring,lin,ori,n)
                    #shift to ori in bin 1
    
                    ring=ring[:,vcat(ori:Int(N),1:ori-1)]
                    lin=lin[:,vcat(ori:N,1:ori-1)]
    
                    write(ring_file,"$counter",ring)
                    write(lin_file,"$counter",lin) #origin is in the middle
                else
                    ring=permutedims(readdlm(config_dir*"thread_$i/config_$j.txt", Int)[1:mon_sep:end,:])
                    ring=ring[:,vcat(ori:N,1:ori-1)]
    
                    write(ring_file,"$counter",ring)
                    write(lin_file,"$counter",ring) #origin is in the middle
                end
            end
        end
    
        close(lin_file)
        close(ring_file)
    else
        println("File $(save_dir)ring_t$t.h5 already exists, skipping...")
    end
end


"""
    compress_MaxEnt_files(raw_dir, out_dir)

Compresses all MaxEnt configurations in a directory into h5 format.

# Arguments
- `raw_dir`: directory containing the MaxEnt simulation output
- `out_dir`: directory to save the configurations in
"""
function compress_MaxEnt_files(raw_dir, out_dir)
    for subdir in subdirs(raw_dir)
        subdir*="/"
        save_to=replace(subdir, raw_dir=>out_dir)
        for timedir in subdirs(subdir)
            println("Compressing $timedir")
            t=parse(Int,timedir[findlast('_',timedir)+1:end])
            compress_configs(timedir,save_to,t)
        end
    end
end
